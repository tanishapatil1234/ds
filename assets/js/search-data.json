{
  
    
        "post0": {
            "title": "Visualizing the Carbon Footprint Gap",
            "content": "Introduction . Intro blurb: Climate change and its impact on the planet has become an increasingly pressing issue in recent years. One of the primary contributors to climate change is the release of carbon dioxide (CO2) into the atomsphere, mainly through the burning of fossil fuels for energy. As a result, there is an increased interest in understanding the relationship between a country&#39;s exonomic growth (measured in gross domestic product (GDP)) and its CO2 emissions. By analyzing GDP and emission data from a wide variety of countries, this project aims to provide insights into the correlation of economic growth and carbon emissions, and contribute to the ongoing discussion of imposing climate change policy, specifically on larger contributors. . Why is CO2 so bad anyways? . The release of CO2 into the atmosphere causes heat to be trapped within. This is known as the greenhouse effect. When sunlight reaches the Earth&#39;s surface some of the energy is reflected back to space. CO2 present in the atmosphere will intercept this energy causing the CO2 molecule to experience vibrations. The vibrations are caused due to CO2&#39;s molecular structure, as it is linear containing one carbon atom and two double-bonded oxygens. This linear arrangement creates polarity, and a strong dipole moment, allowing the molecule to react strongly with EM radiation (absorb a signficant amount of energy). The molecule&#39;s absorbed energy transforms into heat. This generated heat is radiated back to the Earth&#39;s surface where it contributes to global warming, or the increase of the planet&#39;s temperature. This temperature rise leads to a number of climate impacts such as sea level rise, intense and frequent heat waves, severe storms, and changes in precipitation patterns. | . Data . IMPORTING DATA . import sqlite3 from sqlite3 import Error import plotly.io as pio pio.renderers.default = &#39;iframe&#39; def create_connection(db_file): &quot;&quot;&quot; create a database connection to the SQLite database specified by db_file :param db_file: database file :return: Connection object or None &quot;&quot;&quot; conn = None try: conn = sqlite3.connect(db_file) return conn except Error as e: print(e) return conn def create_table(conn, create_table_sql): &quot;&quot;&quot; create a table from the create_table_sql statement :param conn: Connection object :param create_table_sql: a CREATE TABLE statement :return: &quot;&quot;&quot; try: c = conn.cursor() c.execute(create_table_sql) except Error as e: print(e) def main(): database = &quot;instance/energy.db&quot; sql_create_projects_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS energy ( id PRIMARY KEY, country text NOT NULL, e_type text NOT NULL, year integer NOT NULL, gdp integer NOT NULL, CO2_emission Population ); &quot;&quot;&quot; sql_create_temp_table = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS temp ( country text NOT NULL, e_type text NOT NULL, year integer NOT NULL, gdp integer NOT NULL, CO2_emission ); &quot;&quot;&quot; # create a database connection conn = create_connection(database) # create tables if conn is not None: # create projects table create_table(conn, sql_create_projects_table) create_table(conn, sql_create_temp_table) else: print(&quot;Error! cannot create the database connection.&quot;) if __name__ == &#39;__main__&#39;: main() . import pandas as pd df = pd.read_csv(&#39;files/energy.csv&#39;, usecols = [&#39;Country&#39;,&#39;Energy_type&#39;,&#39;Year&#39;,&#39;GDP&#39;,&#39;CO2_emission&#39;, &#39;Population&#39;]) df.to_csv(&#39;files/energy1.csv&#39;) . import sqlite3 as sq import pandas as pd connection = sq.connect(&#39;instance/energy.db&#39;) # Create a cursor object curs = connection.cursor() student = pd.read_csv(&#39;files/energy1.csv&#39;) # Write the data to a sqlite db table student.to_sql(&#39;energy&#39;, connection, if_exists=&#39;replace&#39;, index=False) # Run select sql query curs.execute(&#39;select * from energy&#39;) # Fetch all records # as list of tuples records = curs.fetchall() # Close connection to SQLite database connection.close() . CLEANING DATA . import sqlite3 conn = sqlite3.connect(&#39;instance/energy.db&#39;) cursor = conn.cursor() cursor.execute(&quot;DELETE FROM energy WHERE Energy_type &lt;&gt; &#39;all_energy_types&#39;&quot;) cursor.execute(&quot;DELETE FROM energy WHERE Country = &#39;World&#39;&quot;) cursor.execute(&quot;DELETE FROM energy WHERE GDP IS NULL&quot;) conn.commit() cursor.close() conn.close() . XLIST, YLIST, CLIST : READYING DATA FOR VISUAL REPRESENTATION . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT GDP FROM energy&quot;) # Fetch all rows and store column data in a list x_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT CO2_emission FROM energy&quot;) # Fetch all rows and store column data in a list y_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT Country FROM energy&quot;) # Fetch all rows and store column data in a list c_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . import sqlite3 # Connect to SQLite database conn = sqlite3.connect(&#39;instance/energy.db&#39;) c = conn.cursor() # Execute SQL query to retrieve column data c.execute(&quot;SELECT Population FROM energy&quot;) # Fetch all rows and store column data in a list p_list = [row[0] for row in c.fetchall()] # Close database connection conn.close() . Visualization . import matplotlib.pyplot as plt import seaborn as sns endb = { &quot;Country&quot;: c_list, &quot;GDP&quot;: x_list, &quot;CO2 Emissions&quot;: y_list, &quot;Population&quot;: p_list } # Control figure size for this notebook: plt.rcParams[&#39;figure.figsize&#39;] = [8, 8] # data data = pd.DataFrame(endb) # use the scatterplot function to build the bubble map sns.scatterplot(data=data, x=&quot;GDP&quot;, y=&quot;CO2 Emissions&quot;, legend=False, sizes=(20, 2000)) plt.xscale(&#39;log&#39;) plt.yscale(&#39;log&#39;) # show the graph plt.show() . Add a line of best fit to understand if GDP and CO2 Emissions are correlated mathematically. . import plotly.offline as pyo import plotly.graph_objs as go import numpy as np from scipy import stats # enable Plotly notebook mode pyo.init_notebook_mode(connected=True) # create some random data with country names np.random.seed(1) x = x_list y = y_list # create a scatter plot with a line of best fit trace = go.Scatter( x=x, y=y, mode=&#39;markers&#39;, name=&#39;Data&#39;, text=c_list, # add country metadata to each data point marker=dict(size=10, color=np.arange(len(c_list)), colorscale=&#39;Rainbow&#39;),# adjust marker size for better visibility hovertemplate = &#39;Country: %{text}&lt;br&gt;GDP: Billion %{x}$ PPP&lt;br&gt;CO2 Emissions: %{y} MMtonnes&#39; ) line = go.Scatter(x=x, y=np.poly1d(np.polyfit(x, y, 1))(x), mode=&#39;lines&#39;, name=&#39;Line of Best Fit&#39;, line=dict(color=&#39;red&#39;)) data = [trace, line] layout = go.Layout(title=&quot;World GDP v.s. CO2 Emissions Data 2019&quot;, hovermode=&#39;closest&#39;, xaxis_title = &#39;GDP&#39;, yaxis_title=&#39;CO2 Emissions&#39;, ) # enable hover mode for better metadata display fig = go.Figure(data=data, layout=layout) # Calculate Regression Stats slope, intercept, r_value, p_value, std_err = stats.linregress(x,y) r_squared = r_value**2 print(r_squared) # display the Plotly figure in the notebook pyo.iplot(fig) . 0.9072619938877866 . Analysis . Linear Regressions statistics: . CO2 Emissions = 0.3524*GDP - 47.203 | R^2 = 0.907262 | . An r^2 value of approximately 0.91 indicates a very strong, positive correlation between Grodd DOmestic Product (GDP) and carbon dioxide emissions (CO2 Emissions). This means that as a country&#39;s GDP increases, its COS emissions tend to increase as well. . However, strong correlation does not necessarily imply causation. While the data suggests that a strong correlation exists between GDP and CO2 emissions of a country, many other factors such as a country&#39;s level of industrialization and energy mix could impact both factors. . Conclusion, Final Remarks . Nonetheless, the strong correlation between GDP and CO2 emissions highlights the need for effectve climate policies that address the impact of economic growth on the earth. If left unaddressed, CO2 emissions are likely to cause devastatin gimpacts on human populations, ecosystems, and even economies. . Therefore, policymakers must prioritize developing and implementing strategies to reduce carbon emissions while promoting sustainable economic growth. Measures could include transitioning to renewable energy sources (solar, hydro), promoting energy efficiency, and investing in low-carbon infrastructure. . By taking action to address the relationship between GDP and CO2 emissions, we can work towards awareness, and a more sustainable future. .",
            "url": "https://ds.github.io/ds/2023/03/21/GDP_vs_CO2.html",
            "relUrl": "/2023/03/21/GDP_vs_CO2.html",
            "date": " • Mar 21, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This site is built with fastpages .",
          "url": "https://ds.github.io/ds/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "",
          "content": ". Blogs .",
          "url": "https://ds.github.io/ds/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ds.github.io/ds/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}